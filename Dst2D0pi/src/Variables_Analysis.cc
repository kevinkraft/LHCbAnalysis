#include "Variables_Analysis.h"

Dst2D0pi::Variables_Analysis::Variables_Analysis(){}
Dst2D0pi::Variables_Analysis::~Variables_Analysis(){}

void Dst2D0pi::Variables_Analysis::setInputBranches(TTree *tree) {
  // Comment out branches that we don't need to read (saves time)
  tree->SetBranchAddress("Dst_BPVVDZ"                            , &Dst_BPVVDZ                              );
  tree->SetBranchAddress("Dst_DIRA_OWNPV"                        , &Dst_DIRA_OWNPV                          );
  tree->SetBranchAddress("Dst_ENDVERTEX_CHI2"                    , &Dst_ENDVERTEX_CHI2                      );
  tree->SetBranchAddress("Dst_FD_CHI2"                           , &Dst_FD_CHI2                             );
  tree->SetBranchAddress("Dst_LTIME"                             , &Dst_LTIME                               );
  tree->SetBranchAddress("Dst_MINIP"                             , &Dst_MINIP                               );
  tree->SetBranchAddress("Dst_MINIPCHI2"                         , &Dst_MINIPCHI2                           );
  tree->SetBranchAddress("Dst_P_Parallel"                        , &Dst_P_Parallel                          );
  tree->SetBranchAddress("Dst_P_Perp"                            , &Dst_P_Perp                              );
  tree->SetBranchAddress("Dst_X_travelled"                       , &Dst_X_travelled                         );
  tree->SetBranchAddress("Dst_Y_travelled"                       , &Dst_Y_travelled                         );
  tree->SetBranchAddress("Dst_Z_travelled"                       , &Dst_Z_travelled                         );
  tree->SetBranchAddress("nPV"                                   , &nPV                                     );
  //tree->SetBranchAddress("Dst_AllIP"                             ,  Dst_AllIP                               );
  //tree->SetBranchAddress("Dst_AllIPchi2"                         ,  Dst_AllIPchi2                           );
  //tree->SetBranchAddress("Dst_AllDIRA"                           ,  Dst_AllDIRA                             );
  tree->SetBranchAddress("Dst_ENDVERTEX_X"                       , &Dst_ENDVERTEX_X                         );
  tree->SetBranchAddress("Dst_ENDVERTEX_Y"                       , &Dst_ENDVERTEX_Y                         );
  tree->SetBranchAddress("Dst_ENDVERTEX_Z"                       , &Dst_ENDVERTEX_Z                         );
  tree->SetBranchAddress("Dst_ENDVERTEX_XERR"                    , &Dst_ENDVERTEX_XERR                      );
  tree->SetBranchAddress("Dst_ENDVERTEX_YERR"                    , &Dst_ENDVERTEX_YERR                      );
  tree->SetBranchAddress("Dst_ENDVERTEX_ZERR"                    , &Dst_ENDVERTEX_ZERR                      );
  tree->SetBranchAddress("Dst_ENDVERTEX_NDOF"                    , &Dst_ENDVERTEX_NDOF                      );
  //tree->SetBranchAddress("Dst_ENDVERTEX_COV_"                    ,  Dst_ENDVERTEX_COV_                      );
  tree->SetBranchAddress("Dst_OWNPV_X"                           , &Dst_OWNPV_X                             );
  tree->SetBranchAddress("Dst_OWNPV_Y"                           , &Dst_OWNPV_Y                             );
  tree->SetBranchAddress("Dst_OWNPV_Z"                           , &Dst_OWNPV_Z                             );
  tree->SetBranchAddress("Dst_OWNPV_XERR"                        , &Dst_OWNPV_XERR                          );
  tree->SetBranchAddress("Dst_OWNPV_YERR"                        , &Dst_OWNPV_YERR                          );
  tree->SetBranchAddress("Dst_OWNPV_ZERR"                        , &Dst_OWNPV_ZERR                          );
  tree->SetBranchAddress("Dst_OWNPV_CHI2"                        , &Dst_OWNPV_CHI2                          );
  tree->SetBranchAddress("Dst_OWNPV_NDOF"                        , &Dst_OWNPV_NDOF                          );
  tree->SetBranchAddress("Dst_OWNPV_COV_"                        ,  Dst_OWNPV_COV_                          );
  tree->SetBranchAddress("Dst_IP_OWNPV"                          , &Dst_IP_OWNPV                            );
  tree->SetBranchAddress("Dst_IPCHI2_OWNPV"                      , &Dst_IPCHI2_OWNPV                        );
  tree->SetBranchAddress("Dst_FD_OWNPV"                          , &Dst_FD_OWNPV                            );
  tree->SetBranchAddress("Dst_FDCHI2_OWNPV"                      , &Dst_FDCHI2_OWNPV                        );
  tree->SetBranchAddress("Dst_P"                                 , &Dst_P                                   );
  tree->SetBranchAddress("Dst_PT"                                , &Dst_PT                                  );
  tree->SetBranchAddress("Dst_PE"                                , &Dst_PE                                  );
  tree->SetBranchAddress("Dst_PX"                                , &Dst_PX                                  );
  tree->SetBranchAddress("Dst_PY"                                , &Dst_PY                                  );
  tree->SetBranchAddress("Dst_PZ"                                , &Dst_PZ                                  );
  //tree->SetBranchAddress("Dst_MM"                                , &Dst_MM                                  );
  //tree->SetBranchAddress("Dst_MMERR"                             , &Dst_MMERR                               );
  tree->SetBranchAddress("Dst_M"                                 , &Dst_M                                   );
  //tree->SetBranchAddress("Dst_ID"                                , &Dst_ID                                  );
  tree->SetBranchAddress("Dst_TAU"                               , &Dst_TAU                                 );
  tree->SetBranchAddress("Dst_TAUERR"                            , &Dst_TAUERR                              );
  tree->SetBranchAddress("Dst_TAUCHI2"                           , &Dst_TAUCHI2                             );
  tree->SetBranchAddress("Dst_DTF_nPV"                           , &Dst_DTF_nPV                             );
  tree->SetBranchAddress("Dst_DTF_D0_M"                          , &arr_Dst_DTF_D0_M                        ); 
  tree->SetBranchAddress("Dst_DTF_M"                             , &arr_Dst_DTF_M                           );
  tree->SetBranchAddress("Dst_DTF_chi2"                          , &arr_Dst_DTF_chi2                        );
  tree->SetBranchAddress("Dst_DTF_bothmass_nPV"                  , &Dst_DTF_bothmass_nPV                    );
  tree->SetBranchAddress("Dst_DTF_bothmass_D0_M"                 , &arr_Dst_DTF_bothmass_D0_M               );
  tree->SetBranchAddress("Dst_DTF_bothmass_M"                    , &arr_Dst_DTF_bothmass_M                  );
  tree->SetBranchAddress("Dst_DTF_bothmass_chi2"                 , &arr_Dst_DTF_bothmass_chi2               );
  tree->SetBranchAddress("Dst_DTF_mass_nPV"                      , &Dst_DTF_mass_nPV                        );
  tree->SetBranchAddress("Dst_DTF_mass_D0_M"                     , &arr_Dst_DTF_mass_D0_M                   );
  tree->SetBranchAddress("Dst_DTF_mass_M"                        , &arr_Dst_DTF_mass_M                      );
  tree->SetBranchAddress("Dst_DTF_mass_chi2"                     , &arr_Dst_DTF_mass_chi2                   );
  tree->SetBranchAddress("Dst_DTF_mass_vtx_nPV"                  , &Dst_DTF_mass_vtx_nPV                    );
  tree->SetBranchAddress("Dst_DTF_mass_vtx_D0_M"                 , &arr_Dst_DTF_mass_vtx_D0_M               );
  tree->SetBranchAddress("Dst_DTF_mass_vtx_M"                    , &arr_Dst_DTF_mass_vtx_M                  );
  tree->SetBranchAddress("Dst_DTF_mass_vtx_chi2"                 , &arr_Dst_DTF_mass_vtx_chi2               );
  tree->SetBranchAddress("Dst_DTF_vtx_nPV"                       , &Dst_DTF_vtx_nPV                         );
  tree->SetBranchAddress("Dst_DTF_vtx_D0_M"                      , &arr_Dst_DTF_vtx_D0_M                    );
  tree->SetBranchAddress("Dst_DTF_vtx_M"                         , &arr_Dst_DTF_vtx_M                       );
  tree->SetBranchAddress("Dst_DTF_vtx_chi2"                      , &arr_Dst_DTF_vtx_chi2                    );
  //tree->SetBranchAddress("Dst_L0Global_Dec"                      , &Dst_L0Global_Dec                        );
  //tree->SetBranchAddress("Dst_L0Global_TIS"                      , &Dst_L0Global_TIS                        );
  //tree->SetBranchAddress("Dst_L0Global_TOS"                      , &Dst_L0Global_TOS                        );
  //tree->SetBranchAddress("Dst_Hlt1Global_Dec"                    , &Dst_Hlt1Global_Dec                      );
  //tree->SetBranchAddress("Dst_Hlt1Global_TIS"                    , &Dst_Hlt1Global_TIS                      );
  //tree->SetBranchAddress("Dst_Hlt1Global_TOS"                    , &Dst_Hlt1Global_TOS                      );
  //tree->SetBranchAddress("Dst_Hlt1Phys_Dec"                      , &Dst_Hlt1Phys_Dec                        );
  //tree->SetBranchAddress("Dst_Hlt1Phys_TIS"                      , &Dst_Hlt1Phys_TIS                        );
  //tree->SetBranchAddress("Dst_Hlt1Phys_TOS"                      , &Dst_Hlt1Phys_TOS                        );
  //tree->SetBranchAddress("Dst_Hlt2Global_Dec"                    , &Dst_Hlt2Global_Dec                      );
  //tree->SetBranchAddress("Dst_Hlt2Global_TIS"                    , &Dst_Hlt2Global_TIS                      );
  //tree->SetBranchAddress("Dst_Hlt2Global_TOS"                    , &Dst_Hlt2Global_TOS                      );
  //tree->SetBranchAddress("Dst_Hlt2Phys_Dec"                      , &Dst_Hlt2Phys_Dec                        );
  //tree->SetBranchAddress("Dst_Hlt2Phys_TIS"                      , &Dst_Hlt2Phys_TIS                        );
  //tree->SetBranchAddress("Dst_Hlt2Phys_TOS"                      , &Dst_Hlt2Phys_TOS                        );
  //tree->SetBranchAddress("Dst_L0HadronDecision_Dec"              , &Dst_L0HadronDecision_Dec                );
  //tree->SetBranchAddress("Dst_L0HadronDecision_TIS"              , &Dst_L0HadronDecision_TIS                );
  //tree->SetBranchAddress("Dst_L0HadronDecision_TOS"              , &Dst_L0HadronDecision_TOS                );
  //tree->SetBranchAddress("Dst_L0ElectronDecision_Dec"            , &Dst_L0ElectronDecision_Dec              );
  //tree->SetBranchAddress("Dst_L0ElectronDecision_TIS"            , &Dst_L0ElectronDecision_TIS              );
  //tree->SetBranchAddress("Dst_L0ElectronDecision_TOS"            , &Dst_L0ElectronDecision_TOS              );
  //tree->SetBranchAddress("Dst_L0PhotonDecision_Dec"              , &Dst_L0PhotonDecision_Dec                );
  //tree->SetBranchAddress("Dst_L0PhotonDecision_TIS"              , &Dst_L0PhotonDecision_TIS                );
  //tree->SetBranchAddress("Dst_L0PhotonDecision_TOS"              , &Dst_L0PhotonDecision_TOS                );
  //tree->SetBranchAddress("Dst_L0MuonDecision_Dec"                , &Dst_L0MuonDecision_Dec                  );
  //tree->SetBranchAddress("Dst_L0MuonDecision_TIS"                , &Dst_L0MuonDecision_TIS                  );
  //tree->SetBranchAddress("Dst_L0MuonDecision_TOS"                , &Dst_L0MuonDecision_TOS                  );
  //tree->SetBranchAddress("Dst_L0DiMuonDecision_Dec"              , &Dst_L0DiMuonDecision_Dec                );
  //tree->SetBranchAddress("Dst_L0DiMuonDecision_TIS"              , &Dst_L0DiMuonDecision_TIS                );
  //tree->SetBranchAddress("Dst_L0DiMuonDecision_TOS"              , &Dst_L0DiMuonDecision_TOS                );
  //tree->SetBranchAddress("Dst_Hlt1TrackMVADecision_Dec"          , &Dst_Hlt1TrackMVADecision_Dec            );
  //tree->SetBranchAddress("Dst_Hlt1TrackMVADecision_TIS"          , &Dst_Hlt1TrackMVADecision_TIS            );
  //tree->SetBranchAddress("Dst_Hlt1TrackMVADecision_TOS"          , &Dst_Hlt1TrackMVADecision_TOS            );
  //tree->SetBranchAddress("Dst_Hlt1TwoTrackMVADecision_Dec"       , &Dst_Hlt1TwoTrackMVADecision_Dec         );
  //tree->SetBranchAddress("Dst_Hlt1TwoTrackMVADecision_TIS"       , &Dst_Hlt1TwoTrackMVADecision_TIS         );
  //tree->SetBranchAddress("Dst_Hlt1TwoTrackMVADecision_TOS"       , &Dst_Hlt1TwoTrackMVADecision_TOS         );
  //tree->SetBranchAddress("Dst_Hlt1TrackMuonDecision_Dec"         , &Dst_Hlt1TrackMuonDecision_Dec           );
  //tree->SetBranchAddress("Dst_Hlt1TrackMuonDecision_TIS"         , &Dst_Hlt1TrackMuonDecision_TIS           );
  //tree->SetBranchAddress("Dst_Hlt1TrackMuonDecision_TOS"         , &Dst_Hlt1TrackMuonDecision_TOS           );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDetachedDecision_Dec", &Dst_Hlt1CalibTrackingKPiDetachedDecision_Dec);
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDetachedDecision_TIS", &Dst_Hlt1CalibTrackingKPiDetachedDecision_TIS);
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDetachedDecision_TOS", &Dst_Hlt1CalibTrackingKPiDetachedDecision_TOS);
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDecision_Dec"  , &Dst_Hlt1CalibTrackingKPiDecision_Dec    );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDecision_TIS"  , &Dst_Hlt1CalibTrackingKPiDecision_TIS    );
  tree->SetBranchAddress("Dst_Hlt1CalibTrackingKPiDecision_TOS"  , &Dst_Hlt1CalibTrackingKPiDecision_TOS    );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKKDecision_Dec"   , &Dst_Hlt1CalibTrackingKKDecision_Dec     );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKKDecision_TIS"   , &Dst_Hlt1CalibTrackingKKDecision_TIS     );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingKKDecision_TOS"   , &Dst_Hlt1CalibTrackingKKDecision_TOS     );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingPiPiDecision_Dec" , &Dst_Hlt1CalibTrackingPiPiDecision_Dec   );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingPiPiDecision_TIS" , &Dst_Hlt1CalibTrackingPiPiDecision_TIS   );
  //tree->SetBranchAddress("Dst_Hlt1CalibTrackingPiPiDecision_TOS" , &Dst_Hlt1CalibTrackingPiPiDecision_TOS   );
  //tree->SetBranchAddress("Dst_Hlt1B2GammaGammaDecision_Dec"      , &Dst_Hlt1B2GammaGammaDecision_Dec        );
  //tree->SetBranchAddress("Dst_Hlt1B2GammaGammaDecision_TIS"      , &Dst_Hlt1B2GammaGammaDecision_TIS        );
  //tree->SetBranchAddress("Dst_Hlt1B2GammaGammaDecision_TOS"      , &Dst_Hlt1B2GammaGammaDecision_TOS        );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KKDecision_Dec"     , &Dst_Hlt1B2HH_LTUNB_KKDecision_Dec       );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KKDecision_TIS"     , &Dst_Hlt1B2HH_LTUNB_KKDecision_TIS       );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KKDecision_TOS"     , &Dst_Hlt1B2HH_LTUNB_KKDecision_TOS       );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KPiDecision_Dec"    , &Dst_Hlt1B2HH_LTUNB_KPiDecision_Dec      );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KPiDecision_TIS"    , &Dst_Hlt1B2HH_LTUNB_KPiDecision_TIS      );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_KPiDecision_TOS"    , &Dst_Hlt1B2HH_LTUNB_KPiDecision_TOS      );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_PiPiDecision_Dec"   , &Dst_Hlt1B2HH_LTUNB_PiPiDecision_Dec     );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_PiPiDecision_TIS"   , &Dst_Hlt1B2HH_LTUNB_PiPiDecision_TIS     );
  //tree->SetBranchAddress("Dst_Hlt1B2HH_LTUNB_PiPiDecision_TOS"   , &Dst_Hlt1B2HH_LTUNB_PiPiDecision_TOS     );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiGamma_LTUNBDecision_Dec"  , &Dst_Hlt1B2PhiGamma_LTUNBDecision_Dec    );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiGamma_LTUNBDecision_TIS"  , &Dst_Hlt1B2PhiGamma_LTUNBDecision_TIS    );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiGamma_LTUNBDecision_TOS"  , &Dst_Hlt1B2PhiGamma_LTUNBDecision_TOS    );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiPhi_LTUNBDecision_Dec"    , &Dst_Hlt1B2PhiPhi_LTUNBDecision_Dec      );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiPhi_LTUNBDecision_TIS"    , &Dst_Hlt1B2PhiPhi_LTUNBDecision_TIS      );
  //tree->SetBranchAddress("Dst_Hlt1B2PhiPhi_LTUNBDecision_TOS"    , &Dst_Hlt1B2PhiPhi_LTUNBDecision_TOS      );
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_Dec", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TIS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TIS);
  tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_Dec", &Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TIS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TOS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_Dec", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TIS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TOS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_Dec", &Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TIS", &Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TOS", &Dst_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TOS);
  tree->SetBranchAddress("D0_BPVVDZ"                             , &D0_BPVVDZ                               );
  tree->SetBranchAddress("D0_DIRA_OWNPV"                         , &D0_DIRA_OWNPV                           );
  tree->SetBranchAddress("D0_ENDVERTEX_CHI2"                     , &D0_ENDVERTEX_CHI2                       );
  tree->SetBranchAddress("D0_FD_CHI2"                            , &D0_FD_CHI2                              );
  tree->SetBranchAddress("D0_LTIME"                              , &D0_LTIME                                );
  tree->SetBranchAddress("D0_MINIP"                              , &D0_MINIP                                );
  tree->SetBranchAddress("D0_MINIPCHI2"                          , &D0_MINIPCHI2                            );
  //tree->SetBranchAddress("D0_P_Parallel"                         , &D0_P_Parallel                           );
  //tree->SetBranchAddress("D0_P_Perp"                             , &D0_P_Perp                               );
  //tree->SetBranchAddress("D0_X_travelled"                        , &D0_X_travelled                          );
  //tree->SetBranchAddress("D0_Y_travelled"                        , &D0_Y_travelled                          );
  //tree->SetBranchAddress("D0_Z_travelled"                        , &D0_Z_travelled                          );
  tree->SetBranchAddress("D0_AllIP"                              ,  D0_AllIP                                );
  tree->SetBranchAddress("D0_AllIPchi2"                          ,  D0_AllIPchi2                            );
  //tree->SetBranchAddress("D0_AllDIRA"                            ,  D0_AllDIRA                              );
  tree->SetBranchAddress("D0_ENDVERTEX_X"                        , &D0_ENDVERTEX_X                          );
  tree->SetBranchAddress("D0_ENDVERTEX_Y"                        , &D0_ENDVERTEX_Y                          );
  tree->SetBranchAddress("D0_ENDVERTEX_Z"                        , &D0_ENDVERTEX_Z                          );
  tree->SetBranchAddress("D0_ENDVERTEX_XERR"                     , &D0_ENDVERTEX_XERR                       );
  tree->SetBranchAddress("D0_ENDVERTEX_YERR"                     , &D0_ENDVERTEX_YERR                       );
  tree->SetBranchAddress("D0_ENDVERTEX_ZERR"                     , &D0_ENDVERTEX_ZERR                       );
  tree->SetBranchAddress("D0_ENDVERTEX_NDOF"                     , &D0_ENDVERTEX_NDOF                       );
  //tree->SetBranchAddress("D0_ENDVERTEX_COV_"                     ,  D0_ENDVERTEX_COV_                       );
  tree->SetBranchAddress("D0_OWNPV_X"                            , &D0_OWNPV_X                              );
  tree->SetBranchAddress("D0_OWNPV_Y"                            , &D0_OWNPV_Y                              );
  tree->SetBranchAddress("D0_OWNPV_Z"                            , &D0_OWNPV_Z                              );
  tree->SetBranchAddress("D0_OWNPV_XERR"                         , &D0_OWNPV_XERR                           );
  tree->SetBranchAddress("D0_OWNPV_YERR"                         , &D0_OWNPV_YERR                           );
  tree->SetBranchAddress("D0_OWNPV_ZERR"                         , &D0_OWNPV_ZERR                           );
  tree->SetBranchAddress("D0_OWNPV_CHI2"                         , &D0_OWNPV_CHI2                           );
  //tree->SetBranchAddress("D0_OWNPV_NDOF"                         , &D0_OWNPV_NDOF                           );
  //tree->SetBranchAddress("D0_OWNPV_COV_"                         ,  D0_OWNPV_COV_                           );
  tree->SetBranchAddress("D0_IP_OWNPV"                           , &D0_IP_OWNPV                             );
  tree->SetBranchAddress("D0_IPCHI2_OWNPV"                       , &D0_IPCHI2_OWNPV                         );
  tree->SetBranchAddress("D0_FD_OWNPV"                           , &D0_FD_OWNPV                             );
  tree->SetBranchAddress("D0_FDCHI2_OWNPV"                       , &D0_FDCHI2_OWNPV                         );
  //tree->SetBranchAddress("D0_ORIVX_X"                            , &D0_ORIVX_X                              );
  //tree->SetBranchAddress("D0_ORIVX_Y"                            , &D0_ORIVX_Y                              );
  //tree->SetBranchAddress("D0_ORIVX_Z"                            , &D0_ORIVX_Z                              );
  //tree->SetBranchAddress("D0_ORIVX_XERR"                         , &D0_ORIVX_XERR                           );
  //tree->SetBranchAddress("D0_ORIVX_YERR"                         , &D0_ORIVX_YERR                           );
  //tree->SetBranchAddress("D0_ORIVX_ZERR"                         , &D0_ORIVX_ZERR                           );
  //tree->SetBranchAddress("D0_ORIVX_CHI2"                         , &D0_ORIVX_CHI2                           );
  //tree->SetBranchAddress("D0_ORIVX_NDOF"                         , &D0_ORIVX_NDOF                           );
  //tree->SetBranchAddress("D0_ORIVX_COV_"                         ,  D0_ORIVX_COV_                           );
  //tree->SetBranchAddress("D0_FD_ORIVX"                           , &D0_FD_ORIVX                             );
  //tree->SetBranchAddress("D0_FDCHI2_ORIVX"                       , &D0_FDCHI2_ORIVX                         );
  //tree->SetBranchAddress("D0_DIRA_ORIVX"                         , &D0_DIRA_ORIVX                           );
  tree->SetBranchAddress("D0_P"                                  , &D0_P                                    );
  tree->SetBranchAddress("D0_PT"                                 , &D0_PT                                   );
  tree->SetBranchAddress("D0_PE"                                 , &D0_PE                                   );
  tree->SetBranchAddress("D0_PX"                                 , &D0_PX                                   );
  tree->SetBranchAddress("D0_PY"                                 , &D0_PY                                   );
  tree->SetBranchAddress("D0_PZ"                                 , &D0_PZ                                   );
  //tree->SetBranchAddress("D0_MM"                                 , &D0_MM                                   );
  //tree->SetBranchAddress("D0_MMERR"                              , &D0_MMERR                                );
  tree->SetBranchAddress("D0_M"                                  , &D0_M                                    );
  //tree->SetBranchAddress("D0_ID"                                 , &D0_ID                                   );
  tree->SetBranchAddress("D0_TAU"                                , &D0_TAU                                  );
  tree->SetBranchAddress("D0_TAUERR"                             , &D0_TAUERR                               );
  //tree->SetBranchAddress("D0_TAUCHI2"                            , &D0_TAUCHI2                              );
  //tree->SetBranchAddress("D0_L0Global_Dec"                       , &D0_L0Global_Dec                         );
  //tree->SetBranchAddress("D0_L0Global_TIS"                       , &D0_L0Global_TIS                         );
  //tree->SetBranchAddress("D0_L0Global_TOS"                       , &D0_L0Global_TOS                         );
  //tree->SetBranchAddress("D0_Hlt1Global_Dec"                     , &D0_Hlt1Global_Dec                       );
  //tree->SetBranchAddress("D0_Hlt1Global_TIS"                     , &D0_Hlt1Global_TIS                       );
  //tree->SetBranchAddress("D0_Hlt1Global_TOS"                     , &D0_Hlt1Global_TOS                       );
  //tree->SetBranchAddress("D0_Hlt1Phys_Dec"                       , &D0_Hlt1Phys_Dec                         );
  //tree->SetBranchAddress("D0_Hlt1Phys_TIS"                       , &D0_Hlt1Phys_TIS                         );
  //tree->SetBranchAddress("D0_Hlt1Phys_TOS"                       , &D0_Hlt1Phys_TOS                         );
  //tree->SetBranchAddress("D0_Hlt2Global_Dec"                     , &D0_Hlt2Global_Dec                       );
  //tree->SetBranchAddress("D0_Hlt2Global_TIS"                     , &D0_Hlt2Global_TIS                       );
  //tree->SetBranchAddress("D0_Hlt2Global_TOS"                     , &D0_Hlt2Global_TOS                       );
  //tree->SetBranchAddress("D0_Hlt2Phys_Dec"                       , &D0_Hlt2Phys_Dec                         );
  //tree->SetBranchAddress("D0_Hlt2Phys_TIS"                       , &D0_Hlt2Phys_TIS                         );
  //tree->SetBranchAddress("D0_Hlt2Phys_TOS"                       , &D0_Hlt2Phys_TOS                         );
  //tree->SetBranchAddress("D0_L0HadronDecision_Dec"               , &D0_L0HadronDecision_Dec                 );
  //tree->SetBranchAddress("D0_L0HadronDecision_TIS"               , &D0_L0HadronDecision_TIS                 );
  //tree->SetBranchAddress("D0_L0HadronDecision_TOS"               , &D0_L0HadronDecision_TOS                 );
  //tree->SetBranchAddress("D0_L0ElectronDecision_Dec"             , &D0_L0ElectronDecision_Dec               );
  //tree->SetBranchAddress("D0_L0ElectronDecision_TIS"             , &D0_L0ElectronDecision_TIS               );
  //tree->SetBranchAddress("D0_L0ElectronDecision_TOS"             , &D0_L0ElectronDecision_TOS               );
  //tree->SetBranchAddress("D0_L0PhotonDecision_Dec"               , &D0_L0PhotonDecision_Dec                 );
  //tree->SetBranchAddress("D0_L0PhotonDecision_TIS"               , &D0_L0PhotonDecision_TIS                 );
  //tree->SetBranchAddress("D0_L0PhotonDecision_TOS"               , &D0_L0PhotonDecision_TOS                 );
  //tree->SetBranchAddress("D0_L0MuonDecision_Dec"                 , &D0_L0MuonDecision_Dec                   );
  //tree->SetBranchAddress("D0_L0MuonDecision_TIS"                 , &D0_L0MuonDecision_TIS                   );
  //tree->SetBranchAddress("D0_L0MuonDecision_TOS"                 , &D0_L0MuonDecision_TOS                   );
  //tree->SetBranchAddress("D0_L0DiMuonDecision_Dec"               , &D0_L0DiMuonDecision_Dec                 );
  //tree->SetBranchAddress("D0_L0DiMuonDecision_TIS"               , &D0_L0DiMuonDecision_TIS                 );
  //tree->SetBranchAddress("D0_L0DiMuonDecision_TOS"               , &D0_L0DiMuonDecision_TOS                 );
  //tree->SetBranchAddress("D0_Hlt1TrackMVADecision_Dec"           , &D0_Hlt1TrackMVADecision_Dec             );
  //tree->SetBranchAddress("D0_Hlt1TrackMVADecision_TIS"           , &D0_Hlt1TrackMVADecision_TIS             );
  //tree->SetBranchAddress("D0_Hlt1TrackMVADecision_TOS"           , &D0_Hlt1TrackMVADecision_TOS             );
  //tree->SetBranchAddress("D0_Hlt1TwoTrackMVADecision_Dec"        , &D0_Hlt1TwoTrackMVADecision_Dec          );
  //tree->SetBranchAddress("D0_Hlt1TwoTrackMVADecision_TIS"        , &D0_Hlt1TwoTrackMVADecision_TIS          );
  //tree->SetBranchAddress("D0_Hlt1TwoTrackMVADecision_TOS"        , &D0_Hlt1TwoTrackMVADecision_TOS          );
  //tree->SetBranchAddress("D0_Hlt1TrackMuonDecision_Dec"          , &D0_Hlt1TrackMuonDecision_Dec            );
  //tree->SetBranchAddress("D0_Hlt1TrackMuonDecision_TIS"          , &D0_Hlt1TrackMuonDecision_TIS            );
  //tree->SetBranchAddress("D0_Hlt1TrackMuonDecision_TOS"          , &D0_Hlt1TrackMuonDecision_TOS            );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDetachedDecision_Dec", &D0_Hlt1CalibTrackingKPiDetachedDecision_Dec);
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDetachedDecision_TIS", &D0_Hlt1CalibTrackingKPiDetachedDecision_TIS);
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDetachedDecision_TOS", &D0_Hlt1CalibTrackingKPiDetachedDecision_TOS);
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDecision_Dec"   , &D0_Hlt1CalibTrackingKPiDecision_Dec     );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDecision_TIS"   , &D0_Hlt1CalibTrackingKPiDecision_TIS     );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKPiDecision_TOS"   , &D0_Hlt1CalibTrackingKPiDecision_TOS     );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKKDecision_Dec"    , &D0_Hlt1CalibTrackingKKDecision_Dec      );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKKDecision_TIS"    , &D0_Hlt1CalibTrackingKKDecision_TIS      );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingKKDecision_TOS"    , &D0_Hlt1CalibTrackingKKDecision_TOS      );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingPiPiDecision_Dec"  , &D0_Hlt1CalibTrackingPiPiDecision_Dec    );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingPiPiDecision_TIS"  , &D0_Hlt1CalibTrackingPiPiDecision_TIS    );
  //tree->SetBranchAddress("D0_Hlt1CalibTrackingPiPiDecision_TOS"  , &D0_Hlt1CalibTrackingPiPiDecision_TOS    );
  //tree->SetBranchAddress("D0_Hlt1B2GammaGammaDecision_Dec"       , &D0_Hlt1B2GammaGammaDecision_Dec         );
  //tree->SetBranchAddress("D0_Hlt1B2GammaGammaDecision_TIS"       , &D0_Hlt1B2GammaGammaDecision_TIS         );
  //tree->SetBranchAddress("D0_Hlt1B2GammaGammaDecision_TOS"       , &D0_Hlt1B2GammaGammaDecision_TOS         );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KKDecision_Dec"      , &D0_Hlt1B2HH_LTUNB_KKDecision_Dec        );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KKDecision_TIS"      , &D0_Hlt1B2HH_LTUNB_KKDecision_TIS        );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KKDecision_TOS"      , &D0_Hlt1B2HH_LTUNB_KKDecision_TOS        );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KPiDecision_Dec"     , &D0_Hlt1B2HH_LTUNB_KPiDecision_Dec       );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KPiDecision_TIS"     , &D0_Hlt1B2HH_LTUNB_KPiDecision_TIS       );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_KPiDecision_TOS"     , &D0_Hlt1B2HH_LTUNB_KPiDecision_TOS       );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_PiPiDecision_Dec"    , &D0_Hlt1B2HH_LTUNB_PiPiDecision_Dec      );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_PiPiDecision_TIS"    , &D0_Hlt1B2HH_LTUNB_PiPiDecision_TIS      );
  //tree->SetBranchAddress("D0_Hlt1B2HH_LTUNB_PiPiDecision_TOS"    , &D0_Hlt1B2HH_LTUNB_PiPiDecision_TOS      );
  //tree->SetBranchAddress("D0_Hlt1B2PhiGamma_LTUNBDecision_Dec"   , &D0_Hlt1B2PhiGamma_LTUNBDecision_Dec     );
  //tree->SetBranchAddress("D0_Hlt1B2PhiGamma_LTUNBDecision_TIS"   , &D0_Hlt1B2PhiGamma_LTUNBDecision_TIS     );
  //tree->SetBranchAddress("D0_Hlt1B2PhiGamma_LTUNBDecision_TOS"   , &D0_Hlt1B2PhiGamma_LTUNBDecision_TOS     );
  //tree->SetBranchAddress("D0_Hlt1B2PhiPhi_LTUNBDecision_Dec"     , &D0_Hlt1B2PhiPhi_LTUNBDecision_Dec       );
  //tree->SetBranchAddress("D0_Hlt1B2PhiPhi_LTUNBDecision_TIS"     , &D0_Hlt1B2PhiPhi_LTUNBDecision_TIS       );
  //tree->SetBranchAddress("D0_Hlt1B2PhiPhi_LTUNBDecision_TOS"     , &D0_Hlt1B2PhiPhi_LTUNBDecision_TOS       );
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_Dec", &D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TIS", &D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS", &D0_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_Dec", &D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TIS", &D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TOS", &D0_Hlt2CharmHadDstp2D0Pip_D02KpPim_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_Dec", &D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TIS", &D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TOS", &D0_Hlt2CharmHadDstp2D0Pip_D02KmKp_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_Dec", &D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_Dec);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TIS", &D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TIS);
  //tree->SetBranchAddress("D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TOS", &D0_Hlt2CharmHadDstp2D0Pip_D02PimPip_LTUNBTurboDecision_TOS);
  //tree->SetBranchAddress("K_BPVVDZ"                              , &K_BPVVDZ                                );
  //tree->SetBranchAddress("K_DIRA_OWNPV"                          , &K_DIRA_OWNPV                            );
  //tree->SetBranchAddress("K_ENDVERTEX_CHI2"                      , &K_ENDVERTEX_CHI2                        );
  //tree->SetBranchAddress("K_FD_CHI2"                             , &K_FD_CHI2                               );
  //tree->SetBranchAddress("K_LTIME"                               , &K_LTIME                                 );
  tree->SetBranchAddress("K_MINIP"                               , &K_MINIP                                 );
  tree->SetBranchAddress("K_MINIPCHI2"                           , &K_MINIPCHI2                             );
  //tree->SetBranchAddress("K_P_Parallel"                          , &K_P_Parallel                            );
  //tree->SetBranchAddress("K_P_Perp"                              , &K_P_Perp                                );
  //tree->SetBranchAddress("K_X_travelled"                         , &K_X_travelled                           );
  //tree->SetBranchAddress("K_Y_travelled"                         , &K_Y_travelled                           );
  //tree->SetBranchAddress("K_Z_travelled"                         , &K_Z_travelled                           );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNe"                  , &K_MC12TuneV2_ProbNNe                    );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNmu"                 , &K_MC12TuneV2_ProbNNmu                   );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNpi"                 , &K_MC12TuneV2_ProbNNpi                   );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNk"                  , &K_MC12TuneV2_ProbNNk                    );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNp"                  , &K_MC12TuneV2_ProbNNp                    );
  //tree->SetBranchAddress("K_MC12TuneV2_ProbNNghost"              , &K_MC12TuneV2_ProbNNghost                );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNe"                  , &K_MC12TuneV3_ProbNNe                    );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNmu"                 , &K_MC12TuneV3_ProbNNmu                   );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNpi"                 , &K_MC12TuneV3_ProbNNpi                   );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNk"                  , &K_MC12TuneV3_ProbNNk                    );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNp"                  , &K_MC12TuneV3_ProbNNp                    );
  //tree->SetBranchAddress("K_MC12TuneV3_ProbNNghost"              , &K_MC12TuneV3_ProbNNghost                );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNe"                  , &K_MC12TuneV4_ProbNNe                    );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNmu"                 , &K_MC12TuneV4_ProbNNmu                   );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNpi"                 , &K_MC12TuneV4_ProbNNpi                   );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNk"                  , &K_MC12TuneV4_ProbNNk                    );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNp"                  , &K_MC12TuneV4_ProbNNp                    );
  //tree->SetBranchAddress("K_MC12TuneV4_ProbNNghost"              , &K_MC12TuneV4_ProbNNghost                );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNe"                  , &K_MC15TuneV1_ProbNNe                    );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNmu"                 , &K_MC15TuneV1_ProbNNmu                   );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNpi"                 , &K_MC15TuneV1_ProbNNpi                   );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNk"                  , &K_MC15TuneV1_ProbNNk                    );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNp"                  , &K_MC15TuneV1_ProbNNp                    );
  //tree->SetBranchAddress("K_MC15TuneV1_ProbNNghost"              , &K_MC15TuneV1_ProbNNghost                );
  //tree->SetBranchAddress("K_AllIP"                               ,  K_AllIP                                 );
  //tree->SetBranchAddress("K_AllIPchi2"                           ,  K_AllIPchi2                             );
  //tree->SetBranchAddress("K_OWNPV_X"                             , &K_OWNPV_X                               );
  //tree->SetBranchAddress("K_OWNPV_Y"                             , &K_OWNPV_Y                               );
  //tree->SetBranchAddress("K_OWNPV_Z"                             , &K_OWNPV_Z                               );
  //tree->SetBranchAddress("K_OWNPV_XERR"                          , &K_OWNPV_XERR                            );
  //tree->SetBranchAddress("K_OWNPV_YERR"                          , &K_OWNPV_YERR                            );
  //tree->SetBranchAddress("K_OWNPV_ZERR"                          , &K_OWNPV_ZERR                            );
  //tree->SetBranchAddress("K_OWNPV_CHI2"                          , &K_OWNPV_CHI2                            );
  //tree->SetBranchAddress("K_OWNPV_NDOF"                          , &K_OWNPV_NDOF                            );
  //tree->SetBranchAddress("K_OWNPV_COV_"                          ,  K_OWNPV_COV_                            );
  tree->SetBranchAddress("K_IP_OWNPV"                            , &K_IP_OWNPV                              );
  tree->SetBranchAddress("K_IPCHI2_OWNPV"                        , &K_IPCHI2_OWNPV                          );
  //tree->SetBranchAddress("K_ORIVX_X"                             , &K_ORIVX_X                               );
  //tree->SetBranchAddress("K_ORIVX_Y"                             , &K_ORIVX_Y                               );
  //tree->SetBranchAddress("K_ORIVX_Z"                             , &K_ORIVX_Z                               );
  //tree->SetBranchAddress("K_ORIVX_XERR"                          , &K_ORIVX_XERR                            );
  //tree->SetBranchAddress("K_ORIVX_YERR"                          , &K_ORIVX_YERR                            );
  //tree->SetBranchAddress("K_ORIVX_ZERR"                          , &K_ORIVX_ZERR                            );
  //tree->SetBranchAddress("K_ORIVX_CHI2"                          , &K_ORIVX_CHI2                            );
  //tree->SetBranchAddress("K_ORIVX_NDOF"                          , &K_ORIVX_NDOF                            );
  //tree->SetBranchAddress("K_ORIVX_COV_"                          ,  K_ORIVX_COV_                            );
  tree->SetBranchAddress("K_P"                                   , &K_P                                     );
  tree->SetBranchAddress("K_PT"                                  , &K_PT                                    );
  tree->SetBranchAddress("K_PE"                                  , &K_PE                                    );
  tree->SetBranchAddress("K_PX"                                  , &K_PX                                    );
  tree->SetBranchAddress("K_PY"                                  , &K_PY                                    );
  tree->SetBranchAddress("K_PZ"                                  , &K_PZ                                    );
  tree->SetBranchAddress("K_M"                                   , &K_M                                     );
  tree->SetBranchAddress("K_ID"                                  , &K_ID                                    );
  tree->SetBranchAddress("K_PIDe"                                , &K_PIDe                                  );
  tree->SetBranchAddress("K_PIDmu"                               , &K_PIDmu                                 );
  tree->SetBranchAddress("K_PIDK"                                , &K_PIDK                                  );
  tree->SetBranchAddress("K_PIDp"                                , &K_PIDp                                  );
  tree->SetBranchAddress("K_ProbNNe"                             , &K_ProbNNe                               );
  tree->SetBranchAddress("K_ProbNNk"                             , &K_ProbNNk                               );
  tree->SetBranchAddress("K_ProbNNp"                             , &K_ProbNNp                               );
  tree->SetBranchAddress("K_ProbNNpi"                            , &K_ProbNNpi                              );
  tree->SetBranchAddress("K_ProbNNmu"                            , &K_ProbNNmu                              );
  tree->SetBranchAddress("K_ProbNNghost"                         , &K_ProbNNghost                           );
  //tree->SetBranchAddress("K_hasMuon"                             , &K_hasMuon                               );
  tree->SetBranchAddress("K_isMuon"                              , &K_isMuon                                );
  //tree->SetBranchAddress("K_hasRich"                             , &K_hasRich                               );
  //tree->SetBranchAddress("K_hasCalo"                             , &K_hasCalo                               );
  tree->SetBranchAddress("K_DOCAZ"                               , &K_DOCAZ                                 );
  //tree->SetBranchAddress("Pi_BPVVDZ"                             , &Pi_BPVVDZ                               );
  //tree->SetBranchAddress("Pi_DIRA_OWNPV"                         , &Pi_DIRA_OWNPV                           );
  //tree->SetBranchAddress("Pi_ENDVERTEX_CHI2"                     , &Pi_ENDVERTEX_CHI2                       );
  //tree->SetBranchAddress("Pi_FD_CHI2"                            , &Pi_FD_CHI2                              );
  //tree->SetBranchAddress("Pi_LTIME"                              , &Pi_LTIME                                );
  tree->SetBranchAddress("Pi_MINIP"                              , &Pi_MINIP                                );
  tree->SetBranchAddress("Pi_MINIPCHI2"                          , &Pi_MINIPCHI2                            );
  //tree->SetBranchAddress("Pi_P_Parallel"                         , &Pi_P_Parallel                           );
  //tree->SetBranchAddress("Pi_P_Perp"                             , &Pi_P_Perp                               );
  //tree->SetBranchAddress("Pi_X_travelled"                        , &Pi_X_travelled                          );
  //tree->SetBranchAddress("Pi_Y_travelled"                        , &Pi_Y_travelled                          );
  //tree->SetBranchAddress("Pi_Z_travelled"                        , &Pi_Z_travelled                          );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNe"                 , &Pi_MC12TuneV2_ProbNNe                   );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNmu"                , &Pi_MC12TuneV2_ProbNNmu                  );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNpi"                , &Pi_MC12TuneV2_ProbNNpi                  );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNk"                 , &Pi_MC12TuneV2_ProbNNk                   );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNp"                 , &Pi_MC12TuneV2_ProbNNp                   );
  //tree->SetBranchAddress("Pi_MC12TuneV2_ProbNNghost"             , &Pi_MC12TuneV2_ProbNNghost               );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNe"                 , &Pi_MC12TuneV3_ProbNNe                   );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNmu"                , &Pi_MC12TuneV3_ProbNNmu                  );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNpi"                , &Pi_MC12TuneV3_ProbNNpi                  );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNk"                 , &Pi_MC12TuneV3_ProbNNk                   );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNp"                 , &Pi_MC12TuneV3_ProbNNp                   );
  //tree->SetBranchAddress("Pi_MC12TuneV3_ProbNNghost"             , &Pi_MC12TuneV3_ProbNNghost               );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNe"                 , &Pi_MC12TuneV4_ProbNNe                   );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNmu"                , &Pi_MC12TuneV4_ProbNNmu                  );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNpi"                , &Pi_MC12TuneV4_ProbNNpi                  );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNk"                 , &Pi_MC12TuneV4_ProbNNk                   );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNp"                 , &Pi_MC12TuneV4_ProbNNp                   );
  //tree->SetBranchAddress("Pi_MC12TuneV4_ProbNNghost"             , &Pi_MC12TuneV4_ProbNNghost               );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNe"                 , &Pi_MC15TuneV1_ProbNNe                   );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNmu"                , &Pi_MC15TuneV1_ProbNNmu                  );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNpi"                , &Pi_MC15TuneV1_ProbNNpi                  );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNk"                 , &Pi_MC15TuneV1_ProbNNk                   );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNp"                 , &Pi_MC15TuneV1_ProbNNp                   );
  //tree->SetBranchAddress("Pi_MC15TuneV1_ProbNNghost"             , &Pi_MC15TuneV1_ProbNNghost               );
  //tree->SetBranchAddress("Pi_AllIP"                              ,  Pi_AllIP                                );
  //tree->SetBranchAddress("Pi_AllIPchi2"                          ,  Pi_AllIPchi2                            );
  //tree->SetBranchAddress("Pi_OWNPV_X"                            , &Pi_OWNPV_X                              );
  //tree->SetBranchAddress("Pi_OWNPV_Y"                            , &Pi_OWNPV_Y                              );
  //tree->SetBranchAddress("Pi_OWNPV_Z"                            , &Pi_OWNPV_Z                              );
  //tree->SetBranchAddress("Pi_OWNPV_XERR"                         , &Pi_OWNPV_XERR                           );
  //tree->SetBranchAddress("Pi_OWNPV_YERR"                         , &Pi_OWNPV_YERR                           );
  //tree->SetBranchAddress("Pi_OWNPV_ZERR"                         , &Pi_OWNPV_ZERR                           );
  //tree->SetBranchAddress("Pi_OWNPV_CHI2"                         , &Pi_OWNPV_CHI2                           );
  //tree->SetBranchAddress("Pi_OWNPV_NDOF"                         , &Pi_OWNPV_NDOF                           );
  //tree->SetBranchAddress("Pi_OWNPV_COV_"                         ,  Pi_OWNPV_COV_                           );
  tree->SetBranchAddress("Pi_IP_OWNPV"                           , &Pi_IP_OWNPV                             );
  tree->SetBranchAddress("Pi_IPCHI2_OWNPV"                       , &Pi_IPCHI2_OWNPV                         );
  //tree->SetBranchAddress("Pi_ORIVX_X"                            , &Pi_ORIVX_X                              );
  //tree->SetBranchAddress("Pi_ORIVX_Y"                            , &Pi_ORIVX_Y                              );
  //tree->SetBranchAddress("Pi_ORIVX_Z"                            , &Pi_ORIVX_Z                              );
  //tree->SetBranchAddress("Pi_ORIVX_XERR"                         , &Pi_ORIVX_XERR                           );
  //tree->SetBranchAddress("Pi_ORIVX_YERR"                         , &Pi_ORIVX_YERR                           );
  //tree->SetBranchAddress("Pi_ORIVX_ZERR"                         , &Pi_ORIVX_ZERR                           );
  //tree->SetBranchAddress("Pi_ORIVX_CHI2"                         , &Pi_ORIVX_CHI2                           );
  //tree->SetBranchAddress("Pi_ORIVX_NDOF"                         , &Pi_ORIVX_NDOF                           );
  //tree->SetBranchAddress("Pi_ORIVX_COV_"                         ,  Pi_ORIVX_COV_                           );
  tree->SetBranchAddress("Pi_P"                                  , &Pi_P                                    );
  tree->SetBranchAddress("Pi_PT"                                 , &Pi_PT                                   );
  tree->SetBranchAddress("Pi_PE"                                 , &Pi_PE                                   );
  tree->SetBranchAddress("Pi_PX"                                 , &Pi_PX                                   );
  tree->SetBranchAddress("Pi_PY"                                 , &Pi_PY                                   );
  tree->SetBranchAddress("Pi_PZ"                                 , &Pi_PZ                                   );
  tree->SetBranchAddress("Pi_M"                                  , &Pi_M                                    );
  tree->SetBranchAddress("Pi_ID"                                 , &Pi_ID                                   );
  tree->SetBranchAddress("Pi_PIDe"                               , &Pi_PIDe                                 );
  tree->SetBranchAddress("Pi_PIDmu"                              , &Pi_PIDmu                                );
  tree->SetBranchAddress("Pi_PIDK"                               , &Pi_PIDK                                 );
  tree->SetBranchAddress("Pi_PIDp"                               , &Pi_PIDp                                 );
  tree->SetBranchAddress("Pi_ProbNNe"                            , &Pi_ProbNNe                              );
  tree->SetBranchAddress("Pi_ProbNNk"                            , &Pi_ProbNNk                              );
  tree->SetBranchAddress("Pi_ProbNNp"                            , &Pi_ProbNNp                              );
  tree->SetBranchAddress("Pi_ProbNNpi"                           , &Pi_ProbNNpi                             );
  tree->SetBranchAddress("Pi_ProbNNmu"                           , &Pi_ProbNNmu                             );
  tree->SetBranchAddress("Pi_ProbNNghost"                        , &Pi_ProbNNghost                          );
  //tree->SetBranchAddress("Pi_hasMuon"                            , &Pi_hasMuon                              );
  tree->SetBranchAddress("Pi_isMuon"                             , &Pi_isMuon                               );
  //tree->SetBranchAddress("Pi_hasRich"                            , &Pi_hasRich                              );
  //tree->SetBranchAddress("Pi_hasCalo"                            , &Pi_hasCalo                              );
  tree->SetBranchAddress("Pi_DOCAZ"                              , &Pi_DOCAZ                                );
  //tree->SetBranchAddress("PiBach_BPVVDZ"                         , &PiBach_BPVVDZ                           );
  //tree->SetBranchAddress("PiBach_DIRA_OWNPV"                     , &PiBach_DIRA_OWNPV                       );
  //tree->SetBranchAddress("PiBach_ENDVERTEX_CHI2"                 , &PiBach_ENDVERTEX_CHI2                   );
  //tree->SetBranchAddress("PiBach_FD_CHI2"                        , &PiBach_FD_CHI2                          );
  //tree->SetBranchAddress("PiBach_LTIME"                          , &PiBach_LTIME                            );
  tree->SetBranchAddress("PiBach_MINIP"                          , &PiBach_MINIP                            );
  tree->SetBranchAddress("PiBach_MINIPCHI2"                      , &PiBach_MINIPCHI2                        );
  //tree->SetBranchAddress("PiBach_P_Parallel"                     , &PiBach_P_Parallel                       );
  //tree->SetBranchAddress("PiBach_P_Perp"                         , &PiBach_P_Perp                           );
  //tree->SetBranchAddress("PiBach_X_travelled"                    , &PiBach_X_travelled                      );
  //tree->SetBranchAddress("PiBach_Y_travelled"                    , &PiBach_Y_travelled                      );
  //tree->SetBranchAddress("PiBach_Z_travelled"                    , &PiBach_Z_travelled                      );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNe"             , &PiBach_MC12TuneV2_ProbNNe               );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNmu"            , &PiBach_MC12TuneV2_ProbNNmu              );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNpi"            , &PiBach_MC12TuneV2_ProbNNpi              );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNk"             , &PiBach_MC12TuneV2_ProbNNk               );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNp"             , &PiBach_MC12TuneV2_ProbNNp               );
  //tree->SetBranchAddress("PiBach_MC12TuneV2_ProbNNghost"         , &PiBach_MC12TuneV2_ProbNNghost           );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNe"             , &PiBach_MC12TuneV3_ProbNNe               );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNmu"            , &PiBach_MC12TuneV3_ProbNNmu              );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNpi"            , &PiBach_MC12TuneV3_ProbNNpi              );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNk"             , &PiBach_MC12TuneV3_ProbNNk               );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNp"             , &PiBach_MC12TuneV3_ProbNNp               );
  //tree->SetBranchAddress("PiBach_MC12TuneV3_ProbNNghost"         , &PiBach_MC12TuneV3_ProbNNghost           );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNe"             , &PiBach_MC12TuneV4_ProbNNe               );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNmu"            , &PiBach_MC12TuneV4_ProbNNmu              );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNpi"            , &PiBach_MC12TuneV4_ProbNNpi              );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNk"             , &PiBach_MC12TuneV4_ProbNNk               );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNp"             , &PiBach_MC12TuneV4_ProbNNp               );
  //tree->SetBranchAddress("PiBach_MC12TuneV4_ProbNNghost"         , &PiBach_MC12TuneV4_ProbNNghost           );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNe"             , &PiBach_MC15TuneV1_ProbNNe               );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNmu"            , &PiBach_MC15TuneV1_ProbNNmu              );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNpi"            , &PiBach_MC15TuneV1_ProbNNpi              );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNk"             , &PiBach_MC15TuneV1_ProbNNk               );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNp"             , &PiBach_MC15TuneV1_ProbNNp               );
  //tree->SetBranchAddress("PiBach_MC15TuneV1_ProbNNghost"         , &PiBach_MC15TuneV1_ProbNNghost           );
  //tree->SetBranchAddress("PiBach_AllIP"                          ,  PiBach_AllIP                            );
  //tree->SetBranchAddress("PiBach_AllIPchi2"                      ,  PiBach_AllIPchi2                        );
  //tree->SetBranchAddress("PiBach_OWNPV_X"                        , &PiBach_OWNPV_X                          );
  //tree->SetBranchAddress("PiBach_OWNPV_Y"                        , &PiBach_OWNPV_Y                          );
  //tree->SetBranchAddress("PiBach_OWNPV_Z"                        , &PiBach_OWNPV_Z                          );
  //tree->SetBranchAddress("PiBach_OWNPV_XERR"                     , &PiBach_OWNPV_XERR                       );
  //tree->SetBranchAddress("PiBach_OWNPV_YERR"                     , &PiBach_OWNPV_YERR                       );
  //tree->SetBranchAddress("PiBach_OWNPV_ZERR"                     , &PiBach_OWNPV_ZERR                       );
  //tree->SetBranchAddress("PiBach_OWNPV_CHI2"                     , &PiBach_OWNPV_CHI2                       );
  //tree->SetBranchAddress("PiBach_OWNPV_NDOF"                     , &PiBach_OWNPV_NDOF                       );
  //tree->SetBranchAddress("PiBach_OWNPV_COV_"                     ,  PiBach_OWNPV_COV_                       );
  tree->SetBranchAddress("PiBach_IP_OWNPV"                       , &PiBach_IP_OWNPV                         );
  tree->SetBranchAddress("PiBach_IPCHI2_OWNPV"                   , &PiBach_IPCHI2_OWNPV                     );
  //tree->SetBranchAddress("PiBach_ORIVX_X"                        , &PiBach_ORIVX_X                          );
  //tree->SetBranchAddress("PiBach_ORIVX_Y"                        , &PiBach_ORIVX_Y                          );
  //tree->SetBranchAddress("PiBach_ORIVX_Z"                        , &PiBach_ORIVX_Z                          );
  //tree->SetBranchAddress("PiBach_ORIVX_XERR"                     , &PiBach_ORIVX_XERR                       );
  //tree->SetBranchAddress("PiBach_ORIVX_YERR"                     , &PiBach_ORIVX_YERR                       );
  //tree->SetBranchAddress("PiBach_ORIVX_ZERR"                     , &PiBach_ORIVX_ZERR                       );
  //tree->SetBranchAddress("PiBach_ORIVX_CHI2"                     , &PiBach_ORIVX_CHI2                       );
  //tree->SetBranchAddress("PiBach_ORIVX_NDOF"                     , &PiBach_ORIVX_NDOF                       );
  //tree->SetBranchAddress("PiBach_ORIVX_COV_"                     ,  PiBach_ORIVX_COV_                       );
  tree->SetBranchAddress("PiBach_P"                              , &PiBach_P                                );
  tree->SetBranchAddress("PiBach_PT"                             , &PiBach_PT                               );
  tree->SetBranchAddress("PiBach_PE"                             , &PiBach_PE                               );
  tree->SetBranchAddress("PiBach_PX"                             , &PiBach_PX                               );
  tree->SetBranchAddress("PiBach_PY"                             , &PiBach_PY                               );
  tree->SetBranchAddress("PiBach_PZ"                             , &PiBach_PZ                               );
  tree->SetBranchAddress("PiBach_M"                              , &PiBach_M                                );
  tree->SetBranchAddress("PiBach_ID"                             , &PiBach_ID                               );
  tree->SetBranchAddress("PiBach_PIDe"                           , &PiBach_PIDe                             );
  tree->SetBranchAddress("PiBach_PIDmu"                          , &PiBach_PIDmu                            );
  tree->SetBranchAddress("PiBach_PIDK"                           , &PiBach_PIDK                             );
  tree->SetBranchAddress("PiBach_PIDp"                           , &PiBach_PIDp                             );
  tree->SetBranchAddress("PiBach_ProbNNe"                        , &PiBach_ProbNNe                          );
  tree->SetBranchAddress("PiBach_ProbNNk"                        , &PiBach_ProbNNk                          );
  tree->SetBranchAddress("PiBach_ProbNNp"                        , &PiBach_ProbNNp                          );
  tree->SetBranchAddress("PiBach_ProbNNpi"                       , &PiBach_ProbNNpi                         );
  tree->SetBranchAddress("PiBach_ProbNNmu"                       , &PiBach_ProbNNmu                         );
  tree->SetBranchAddress("PiBach_ProbNNghost"                    , &PiBach_ProbNNghost                      );
  //tree->SetBranchAddress("PiBach_hasMuon"                        , &PiBach_hasMuon                          );
  tree->SetBranchAddress("PiBach_isMuon"                         , &PiBach_isMuon                           );
  //tree->SetBranchAddress("PiBach_hasRich"                        , &PiBach_hasRich                          );
  //tree->SetBranchAddress("PiBach_hasCalo"                        , &PiBach_hasCalo                          );
  tree->SetBranchAddress("PiBach_DOCAZ"                          , &PiBach_DOCAZ                            );
  tree->SetBranchAddress("nCandidate"                            , &nCandidate                              );
  tree->SetBranchAddress("totCandidates"                         , &totCandidates                           );
  tree->SetBranchAddress("EventInSequence"                       , &EventInSequence                         );
  tree->SetBranchAddress("runNumber"                             , &runNumber                               );
  tree->SetBranchAddress("eventNumber"                           , &eventNumber                             );
  //tree->SetBranchAddress("BCID"                                  , &BCID                                    );
  //tree->SetBranchAddress("BCType"                                , &BCType                                  );
  //tree->SetBranchAddress("OdinTCK"                               , &OdinTCK                                 );
  //tree->SetBranchAddress("L0DUTCK"                               , &L0DUTCK                                 );
  //tree->SetBranchAddress("HLT1TCK"                               , &HLT1TCK                                 );
  //tree->SetBranchAddress("HLT2TCK"                               , &HLT2TCK                                 );
  //tree->SetBranchAddress("GpsTime"                               , &GpsTime                                 );
  tree->SetBranchAddress("Polarity"                              , &Polarity                                );
  tree->SetBranchAddress("PVX"                                  , &PVX                                     );
  tree->SetBranchAddress("PVY"                                  , &PVY                                     );
  tree->SetBranchAddress("PVZ"                                  , &PVZ                                     );
  tree->SetBranchAddress("PVXERR"                               , &PVXERR                                  );
  tree->SetBranchAddress("PVYERR"                               , &PVYERR                                  );
  tree->SetBranchAddress("PVZERR"                               , &PVZERR                                  );
  tree->SetBranchAddress("PVCHI2"                               , &PVCHI2                                  );
  tree->SetBranchAddress("PVNDOF"                               , &PVNDOF                                  );
  tree->SetBranchAddress("PVNTRACKS"                            , &PVNTRACKS                               );
  //tree->SetBranchAddress("PVsumPT"                               ,  PVsumPT                                 );
  tree->SetBranchAddress("nPVs"                                  , &nPVs                                    );
  tree->SetBranchAddress("nTracks"                               , &nTracks                                 );
  //tree->SetBranchAddress("nLongTracks"                           , &nLongTracks                             );
  //tree->SetBranchAddress("nDownstreamTracks"                     , &nDownstreamTracks                       );
  //tree->SetBranchAddress("nUpstreamTracks"                       , &nUpstreamTracks                         );
  //tree->SetBranchAddress("nVeloTracks"                           , &nVeloTracks                             );
  //tree->SetBranchAddress("nTTracks"                              , &nTTracks                                );
  //tree->SetBranchAddress("nBackTracks"                           , &nBackTracks                             );
  //tree->SetBranchAddress("nRich1Hits"                            , &nRich1Hits                              );
  //tree->SetBranchAddress("nRich2Hits"                            , &nRich2Hits                              );
  //tree->SetBranchAddress("nVeloClusters"                         , &nVeloClusters                           );
  //tree->SetBranchAddress("nITClusters"                           , &nITClusters                             );
  //tree->SetBranchAddress("nTTClusters"                           , &nTTClusters                             );
  //tree->SetBranchAddress("nOTClusters"                           , &nOTClusters                             );
  tree->SetBranchAddress("nSPDHits"                              , &nSPDHits                                );
  //tree->SetBranchAddress("nMuonCoordsS0"                         , &nMuonCoordsS0                           );
  //tree->SetBranchAddress("nMuonCoordsS1"                         , &nMuonCoordsS1                           );
  //tree->SetBranchAddress("nMuonCoordsS2"                         , &nMuonCoordsS2                           );
  //tree->SetBranchAddress("nMuonCoordsS3"                         , &nMuonCoordsS3                           );
  //tree->SetBranchAddress("nMuonCoordsS4"                         , &nMuonCoordsS4                           );
  //tree->SetBranchAddress("nMuonTracks"                           , &nMuonTracks                             );
}

void Dst2D0pi::Variables_Analysis::setOutputBranches(TTree *tree) {
  tree->Branch("itype"                                 , &itype                                   );
  tree->Branch("sqrts"                                 , &sqrts                                   );
  tree->Branch("evname"                                , &evname                                  );
  tree->Branch("year"                                  , &year                                    );

  // a uniform random variable for unbiased sampling of the data
  tree->Branch("Training"                              , &Training                                , "Training/F"                            );

  // event information
  tree->Branch("runNumber"                             , &runNumber                               , "runNumber/i"                           );
  tree->Branch("eventNumber"                           , &eventNumber                             , "eventNumber/l"                         );
  tree->Branch("nCandidate"                            , &nCandidate                              , "nCandidate/i"                          );
  tree->Branch("totCandidates"                         , &totCandidates                           , "totCandidates/l"                       );
  tree->Branch("polarity"                              , &Polarity                                , "Polarity/S"                            );
  tree->Branch("nPVs"                                  , &nPVs                                    , "nPVs/I"                                );
  tree->Branch("nTracks"                               , &nTracks                                 , "nTracks/I"                             );
  tree->Branch("nSPDHits"                              , &nSPDHits                                , "nSPDHits/I"                            );
  // PV
  tree->Branch("nPV"                                   , &nPV                                     , "nPV/I"                                 );
  tree->Branch("BPV_X"                                  , &BPVX                                     , "BPVX/F"                            );
  tree->Branch("BPV_Y"                                  , &BPVY                                     , "BPVY/F"                            );
  tree->Branch("BPV_Z"                                  , &BPVZ                                     , "BPVZ/F"                            );
  tree->Branch("BPV_EX"                                 , &BPVXERR                                  , "BPVXERR/F"                         );
  tree->Branch("BPV_EY"                                 , &BPVYERR                                  , "BPVYERR/F"                         );
  tree->Branch("BPV_EZ"                                 , &BPVZERR                                  , "BPVZERR/F"                         );
  tree->Branch("BPV_Chi2"                               , &BPVCHI2                                  , "BPVCHI2/F"                         );
  tree->Branch("BPV_Ndof"                               , &BPVNDOF                                  , "BPVNDOF/F"                         );
  tree->Branch("allPV_X"                                , &PVX                                   , "allPVX[nPV]/F"                     );
  tree->Branch("allPV_Y"                                , &PVY                                   , "allPVY[nPV]/F"                     );
  tree->Branch("allPV_Z"                                , &PVZ                                   , "allPVZ[nPV]/F"                     );
  tree->Branch("allPV_EX"                               , &PVXERR                                , "allPVXERR[nPV]/F"                  );
  tree->Branch("allPV_EY"                               , &PVYERR                                , "allPVYERR[nPV]/F"                  );
  tree->Branch("allPV_EZ"                               , &PVZERR                                , "allPVZERR[nPV]/F"                  );
  tree->Branch("allPV_Chi2"                             , &PVCHI2                                , "allPVCHI2[nPV]/F"                  );
  tree->Branch("allPV_Ndof"                             , &PVNDOF                                , "allPVNDOF[nPV]/F"                  );
  // D*
  tree->Branch("Dst_TAU"                                , &Dst_TAU                                , "Dst_TAU/D"                         );
  tree->Branch("Dst_TAUERR"                             , &Dst_TAUERR                             , "Dst_TAUERR/D"                      );
  tree->Branch("Dst_TAUCHI2"                            , &Dst_TAUCHI2                            , "Dst_TAUCHI2/D"                     );
  tree->Branch("Dst_BPVVDZ"                            , &Dst_BPVVDZ                              , "Dst_BPVVDZ/D"                          );
  tree->Branch("Dst_DIRA_OWNPV"                        , &Dst_DIRA_OWNPV                          , "Dst_DIRA_OWNPV/D"                      );
  tree->Branch("Dst_ENDVERTEX_CHI2"                    , &Dst_ENDVERTEX_CHI2                      , "Dst_ENDVERTEX_CHI2/D"                  );
  tree->Branch("Dst_ENDVERTEX_NDOF"                    , &Dst_ENDVERTEX_NDOF                      , "Dst_ENDVERTEX_NDOF/I"                  );
  tree->Branch("Dst_VCHI2NDOF"                         , &Dst_VCHI2NDOF                           , "Dst_VCHI2NDOF"                         );
  tree->Branch("Dst_MinIP"                             , &Dst_MINIP                               , "Dst_MINIP/D"                           );
  tree->Branch("Dst_MinIPChi2"                         , &Dst_MINIPCHI2                           , "Dst_MINIPCHI2/D"                       );
  tree->Branch("Dst_Vtx_X"                             , &Dst_ENDVERTEX_X                         , "Dst_ENDVERTEX_X/D"                     );
  tree->Branch("Dst_Vtx_Y"                             , &Dst_ENDVERTEX_Y                         , "Dst_ENDVERTEX_Y/D"                     );
  tree->Branch("Dst_Vtx_Z"                             , &Dst_ENDVERTEX_Z                         , "Dst_ENDVERTEX_Z/D"                     );
  tree->Branch("Dst_Vtx_EX"                            , &Dst_ENDVERTEX_XERR                      , "Dst_ENDVERTEX_XERR/D"                  );
  tree->Branch("Dst_Vtx_EY"                            , &Dst_ENDVERTEX_YERR                      , "Dst_ENDVERTEX_YERR/D"                  );
  tree->Branch("Dst_Vtx_EZ"                            , &Dst_ENDVERTEX_ZERR                      , "Dst_ENDVERTEX_ZERR/D"                  );
  tree->Branch("Dst_IP"                                , &Dst_IP_OWNPV                            , "Dst_IP_OWNPV/D"                        );
  tree->Branch("Dst_IPChi2"                            , &Dst_IPCHI2_OWNPV                        , "Dst_IPCHI2_OWNPV/D"                    );
  tree->Branch("Dst_FD"                                , &Dst_FD_OWNPV                            , "Dst_FD_OWNPV/D"                        );
  tree->Branch("Dst_FDChi2"                            , &Dst_FDCHI2_OWNPV                        , "Dst_FDCHI2_OWNPV/D"                    );
  tree->Branch("Dst_P"                                 , &Dst_P                                   , "Dst_P/D"                               );
  tree->Branch("Dst_PT"                                , &Dst_PT                                  , "Dst_PT/D"                              );
  tree->Branch("Dst_PE"                                , &Dst_PE                                  , "Dst_PE/D"                              );
  tree->Branch("Dst_PX"                                , &Dst_PX                                  , "Dst_PX/D"                              );
  tree->Branch("Dst_PY"                                , &Dst_PY                                  , "Dst_PY/D"                              );
  tree->Branch("Dst_PZ"                                , &Dst_PZ                                  , "Dst_PZ/D"                              );
  tree->Branch("Dst_M"                                 , &Dst_M                                   , "Dst_M/D"                               );
  tree->Branch("Dst_DTF_D0_M"                          , &Dst_DTF_D0_M                            , "Dst_DTF_D0_M/F"                        ); 
  tree->Branch("Dst_DTF_M"                             , &Dst_DTF_M                               , "Dst_DTF_M/F"                           );
  tree->Branch("Dst_DTF_chi2"                          , &Dst_DTF_chi2                            , "Dst_DTF_chi2/F"                        );
  //tree->Branch("Dst_DTF_bothmass_D0_M"                 , &Dst_DTF_bothmass_D0_M                   , "Dst_DTF_bothmass_D0_M/F"               );
  //tree->Branch("Dst_DTF_bothmass_M"                    , &Dst_DTF_bothmass_M                      , "Dst_DTF_bothmass_M/F"                  );
  tree->Branch("Dst_DTF_bothmass_chi2"                 , &Dst_DTF_bothmass_chi2                   , "Dst_DTF_bothmass_chi2/F"               );
  //tree->Branch("Dst_DTF_mass_D0_M"                     , &Dst_DTF_mass_D0_M                       , "Dst_DTF_mass_D0_M/F"                   );
  tree->Branch("Dst_DTF_mass_M"                        , &Dst_DTF_mass_M                          , "Dst_DTF_mass_M/F"                      );
  tree->Branch("Dst_DTF_mass_chi2"                     , &Dst_DTF_mass_chi2                       , "Dst_DTF_mass_chi2/F"                   );
  //tree->Branch("Dst_DTF_mass_vtx_D0_M"                 , &Dst_DTF_mass_vtx_D0_M                   , "Dst_DTF_mass_vtx_D0_M/F"               );
  tree->Branch("Dst_DTF_mass_vtx_M"                    , &Dst_DTF_mass_vtx_M                      , "Dst_DTF_mass_vtx_M/F"                  );
  tree->Branch("Dst_DTF_mass_vtx_chi2"                 , &Dst_DTF_mass_vtx_chi2                   , "Dst_DTF_mass_vtx_chi2/F"               );
  tree->Branch("Dst_DTF_vtx_D0_M"                      , &Dst_DTF_vtx_D0_M                        , "Dst_DTF_vtx_D0_M/F"                    );
  tree->Branch("Dst_DTF_vtx_M"                         , &Dst_DTF_vtx_M                           , "Dst_DTF_vtx_M/F"                       );
  tree->Branch("Dst_DTF_vtx_chi2"                      , &Dst_DTF_vtx_chi2                        , "Dst_DTF_vtx_chi2/F"                    );
  tree->Branch("Dst_Hlt1CalibTrackingKPiDecision_TOS"  , &Dst_Hlt1CalibTrackingKPiDecision_TOS    , "Dst_Hlt1CalibTrackingKPiDecision_TOS/O");
  tree->Branch("Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS", &Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS, "Dst_Hlt2CharmHadDstp2D0Pip_D02KmPip_LTUNBTurboDecision_TOS/O");
  // D0
  tree->Branch("D0_BPVVDZ"                             , &D0_BPVVDZ                               , "D0_BPVVDZ/D"                           );
  tree->Branch("D0_DIRA_OWNPV"                         , &D0_DIRA_OWNPV                           , "D0_DIRA_OWNPV/D"                       );
  tree->Branch("D0_ENDVERTEX_CHI2"                     , &D0_ENDVERTEX_CHI2                       , "D0_ENDVERTEX_CHI2/D"                   );
  tree->Branch("D0_ENDVERTEX_NDOF"                     , &D0_ENDVERTEX_NDOF                       , "D0_ENDVERTEX_NDOF/I"                   );
  tree->Branch("D0_VCHI2NDOF"                          , &D0_VCHI2NDOF                            , "D0_VCHI2NDOF"                         );
  tree->Branch("D0_LT"                                 , &D0_LTIME                                , "D0_LTIME/D"                            );
  tree->Branch("D0_MinIP"                              , &D0_MINIP                                , "D0_MINIP/D"                            );
  tree->Branch("D0_MinIPChi2"                          , &D0_MINIPCHI2                            , "D0_MINIPCHI2/D"                        );
  tree->Branch("D0_Vtx_X"                              , &D0_ENDVERTEX_X                          , "D0_ENDVERTEX_X/D"                      );
  tree->Branch("D0_Vtx_Y"                              , &D0_ENDVERTEX_Y                          , "D0_ENDVERTEX_Y/D"                      );
  tree->Branch("D0_Vtx_Z"                              , &D0_ENDVERTEX_Z                          , "D0_ENDVERTEX_Z/D"                      );
  tree->Branch("D0_Vtx_XERR"                           , &D0_ENDVERTEX_XERR                       , "D0_ENDVERTEX_XERR/D"                   );
  tree->Branch("D0_Vtx_YERR"                           , &D0_ENDVERTEX_YERR                       , "D0_ENDVERTEX_YERR/D"                   );
  tree->Branch("D0_Vtx_ZERR"                           , &D0_ENDVERTEX_ZERR                       , "D0_ENDVERTEX_ZERR/D"                   );
  tree->Branch("D0_IP"                                 , &D0_IP_OWNPV                             , "D0_IP_OWNPV/D"                         );
  tree->Branch("D0_IPChi2"                             , &D0_IPCHI2_OWNPV                         , "D0_IPCHI2_OWNPV/D"                     );
  tree->Branch("D0_OWNPV_X"                              , &D0_OWNPV_X                          , "D0_OWNPV_X/D"                      );
  tree->Branch("D0_OWNPV_Y"                              , &D0_OWNPV_Y                          , "D0_OWNPV_Y/D"                      );
  tree->Branch("D0_OWNPV_Z"                              , &D0_OWNPV_Z                          , "D0_OWNPV_Z/D"                      );
  tree->Branch("D0_OWNPV_XERR"                           , &D0_OWNPV_XERR                       , "D0_OWNPV_XERR/D"                   );
  tree->Branch("D0_OWNPV_YERR"                           , &D0_OWNPV_YERR                       , "D0_OWNPV_YERR/D"                   );
  tree->Branch("D0_OWNPV_ZERR"                           , &D0_OWNPV_ZERR                       , "D0_OWNPV_ZERR/D"                   );
  tree->Branch("D0_OWNPV_CHI2"                           , &D0_OWNPV_CHI2                       , "D0_OWNPV_CHI2/D"                   );
  tree->Branch("D0_IP_OWNPV"                             , &D0_IP_OWNPV                         , "D0_IP_OWNPV/D"                     );
  tree->Branch("D0_IPCHI2_OWNPV"                         , &D0_IPCHI2_OWNPV                     , "D0_IPCHI2_OWNPV/D"                 );
  tree->Branch("D0_FD"                                 , &D0_FD_OWNPV                             , "D0_FD_OWNPV/D"                         );
  tree->Branch("D0_FDChi2"                             , &D0_FDCHI2_OWNPV                         , "D0_FDCHI2_OWNPV/D"                     );
  tree->Branch("D0_P"                                  , &D0_P                                    , "D0_P/D"                                );
  tree->Branch("D0_PT"                                 , &D0_PT                                   , "D0_PT/D"                               );
  tree->Branch("D0_PE"                                 , &D0_PE                                   , "D0_PE/D"                               );
  tree->Branch("D0_PX"                                 , &D0_PX                                   , "D0_PX/D"                               );
  tree->Branch("D0_PY"                                 , &D0_PY                                   , "D0_PY/D"                               );
  tree->Branch("D0_PZ"                                 , &D0_PZ                                   , "D0_PZ/D"                               );
  tree->Branch("D0_M"                                  , &D0_M                                    , "D0_M/D"                                );
  tree->Branch("D0_TAU"                                , &D0_TAU                                  , "D0_TAU/D"                              );
  tree->Branch("D0_TAUERR"                             , &D0_TAUERR                               , "D0_TAUERR"                             );
  // Km 
  //tree->Branch("K_BPVVDZ"                              , &K_BPVVDZ                                , "K_BPVVDZ/D"                            );
  //tree->Branch("K_DIRA_OWNPV"                          , &K_DIRA_OWNPV                            , "K_DIRA_OWNPV/D"                        );
  tree->Branch("K_MinIP"                               , &K_MINIP                                 , "K_MINIP/D"                             );
  tree->Branch("K_MinIPChi2"                           , &K_MINIPCHI2                             , "K_MINIPCHI2/D"                         );
  tree->Branch("K_IP"                                  , &K_IP_OWNPV                              , "K_IP_OWNPV/D"                          );
  tree->Branch("K_IPChi2"                              , &K_IPCHI2_OWNPV                          , "K_IPCHI2_OWNPV/D"                      );
  tree->Branch("K_P"                                   , &K_P                                     , "K_P/D"                                 );
  tree->Branch("K_PT"                                  , &K_PT                                    , "K_PT/D"                                );
  tree->Branch("K_PE"                                  , &K_PE                                    , "K_PE/D"                                );
  tree->Branch("K_PX"                                  , &K_PX                                    , "K_PX/D"                                );
  tree->Branch("K_PY"                                  , &K_PY                                    , "K_PY/D"                                );
  tree->Branch("K_PZ"                                  , &K_PZ                                    , "K_PZ/D"                                );
  tree->Branch("K_M"                                   , &K_M                                     , "K_M/D"                                 );
  tree->Branch("K_ID"                                  , &K_ID                                    , "K_ID/I"                                );
  tree->Branch("K_PIDe"                                , &K_PIDe                                  , "K_PIDe/D"                              );
  tree->Branch("K_PIDmu"                               , &K_PIDmu                                 , "K_PIDmu/D"                             );
  tree->Branch("K_PIDK"                                , &K_PIDK                                  , "K_PIDK/D"                              );
  tree->Branch("K_PIDp"                                , &K_PIDp                                  , "K_PIDp/D"                              );
  tree->Branch("K_ProbNNe"                             , &K_ProbNNe                               , "K_ProbNNe/D"                           );
  tree->Branch("K_ProbNNk"                             , &K_ProbNNk                               , "K_ProbNNk/D"                           );
  tree->Branch("K_ProbNNp"                             , &K_ProbNNp                               , "K_ProbNNp/D"                           );
  tree->Branch("K_ProbNNpi"                            , &K_ProbNNpi                              , "K_ProbNNpi/D"                          );
  tree->Branch("K_ProbNNmu"                            , &K_ProbNNmu                              , "K_ProbNNmu/D"                          );
  tree->Branch("K_ProbNNghost"                         , &K_ProbNNghost                           , "K_ProbNNghost/D"                       );
  tree->Branch("K_isMuon"                              , &K_isMuon                                , "K_isMuon/O"                            );
  tree->Branch("K_DOCAZ"                               , &K_DOCAZ                                 , "K_DOCAZ/D"                             );
  // Pip
  //tree->Branch("Pi_BPVVDZ"                             , &Pi_BPVVDZ                               , "Pi_BPVVDZ/D"                           );
  //tree->Branch("Pi_DIRA_OWNPV"                         , &Pi_DIRA_OWNPV                           , "Pi_DIRA_OWNPV/D"                       );
  tree->Branch("Pi_MinIP"                              , &Pi_MINIP                                , "Pi_MINIP/D"                            );
  tree->Branch("Pi_MinIPChi2"                          , &Pi_MINIPCHI2                            , "Pi_MINIPCHI2/D"                        );
  tree->Branch("Pi_IP"                                 , &Pi_IP_OWNPV                             , "Pi_IP_OWNPV/D"                         );
  tree->Branch("Pi_IPChi2"                             , &Pi_IPCHI2_OWNPV                         , "Pi_IPCHI2_OWNPV/D"                     );
  tree->Branch("Pi_P"                                  , &Pi_P                                    , "Pi_P/D"                                );
  tree->Branch("Pi_PT"                                 , &Pi_PT                                   , "Pi_PT/D"                               );
  tree->Branch("Pi_PE"                                 , &Pi_PE                                   , "Pi_PE/D"                               );
  tree->Branch("Pi_PX"                                 , &Pi_PX                                   , "Pi_PX/D"                               );
  tree->Branch("Pi_PY"                                 , &Pi_PY                                   , "Pi_PY/D"                               );
  tree->Branch("Pi_PZ"                                 , &Pi_PZ                                   , "Pi_PZ/D"                               );
  tree->Branch("Pi_M"                                  , &Pi_M                                    , "Pi_M/D"                                );
  tree->Branch("Pi_ID"                                 , &Pi_ID                                   , "Pi_ID/I"                               );
  tree->Branch("Pi_PIDe"                               , &Pi_PIDe                                 , "Pi_PIDe/D"                             );
  tree->Branch("Pi_PIDmu"                              , &Pi_PIDmu                                , "Pi_PIDmu/D"                            );
  tree->Branch("Pi_PIDK"                               , &Pi_PIDK                                 , "Pi_PIDK/D"                             );
  tree->Branch("Pi_PIDp"                               , &Pi_PIDp                                 , "Pi_PIDp/D"                             );
  tree->Branch("Pi_ProbNNe"                            , &Pi_ProbNNe                              , "Pi_ProbNNe/D"                          );
  tree->Branch("Pi_ProbNNk"                            , &Pi_ProbNNk                              , "Pi_ProbNNk/D"                          );
  tree->Branch("Pi_ProbNNp"                            , &Pi_ProbNNp                              , "Pi_ProbNNp/D"                          );
  tree->Branch("Pi_ProbNNpi"                           , &Pi_ProbNNpi                             , "Pi_ProbNNpi/D"                         );
  tree->Branch("Pi_ProbNNmu"                           , &Pi_ProbNNmu                             , "Pi_ProbNNmu/D"                         );
  tree->Branch("Pi_ProbNNghost"                        , &Pi_ProbNNghost                          , "Pi_ProbNNghost/D"                      );
  tree->Branch("Pi_isMuon"                             , &Pi_isMuon                               , "Pi_isMuon/O"                           );
  tree->Branch("Pi_DOCAZ"                              , &Pi_DOCAZ                                , "Pi_DOCAZ/D"                            );
  //tree->Branch("PiBach_BPVVDZ"                         , &PiBach_BPVVDZ                           , "PiBach_BPVVDZ/D"                       );
  //tree->Branch("PiBach_DIRA_OWNPV"                     , &PiBach_DIRA_OWNPV                       , "PiBach_DIRA_OWNPV/D"                   );
  tree->Branch("PiBach_MinIP"                          , &PiBach_MINIP                            , "PiBach_MINIP/D"                        );
  tree->Branch("PiBach_MinIPChi2"                      , &PiBach_MINIPCHI2                        , "PiBach_MINIPCHI2/D"                    );
  tree->Branch("PiBach_IP"                             , &PiBach_IP_OWNPV                         , "PiBach_IP_OWNPV/D"                     );
  tree->Branch("PiBach_IPChi2"                         , &PiBach_IPCHI2_OWNPV                     , "PiBach_IPCHI2_OWNPV/D"                 );
  tree->Branch("PiBach_P"                              , &PiBach_P                                , "PiBach_P/D"                            );
  tree->Branch("PiBach_PT"                             , &PiBach_PT                               , "PiBach_PT/D"                           );
  tree->Branch("PiBach_PE"                             , &PiBach_PE                               , "PiBach_PE/D"                           );
  tree->Branch("PiBach_PX"                             , &PiBach_PX                               , "PiBach_PX/D"                           );
  tree->Branch("PiBach_PY"                             , &PiBach_PY                               , "PiBach_PY/D"                           );
  tree->Branch("PiBach_PZ"                             , &PiBach_PZ                               , "PiBach_PZ/D"                           );
  tree->Branch("PiBach_M"                              , &PiBach_M                                , "PiBach_M/D"                            );
  tree->Branch("PiBach_ID"                             , &PiBach_ID                               , "PiBach_ID/I"                           );
  tree->Branch("PiBach_PIDe"                           , &PiBach_PIDe                             , "PiBach_PIDe/D"                         );
  tree->Branch("PiBach_PIDmu"                          , &PiBach_PIDmu                            , "PiBach_PIDmu/D"                        );
  tree->Branch("PiBach_PIDK"                           , &PiBach_PIDK                             , "PiBach_PIDK/D"                         );
  tree->Branch("PiBach_PIDp"                           , &PiBach_PIDp                             , "PiBach_PIDp/D"                         );
  tree->Branch("PiBach_ProbNNe"                        , &PiBach_ProbNNe                          , "PiBach_ProbNNe/D"                      );
  tree->Branch("PiBach_ProbNNk"                        , &PiBach_ProbNNk                          , "PiBach_ProbNNk/D"                      );
  tree->Branch("PiBach_ProbNNp"                        , &PiBach_ProbNNp                          , "PiBach_ProbNNp/D"                      );
  tree->Branch("PiBach_ProbNNpi"                       , &PiBach_ProbNNpi                         , "PiBach_ProbNNpi/D"                     );
  tree->Branch("PiBach_ProbNNmu"                       , &PiBach_ProbNNmu                         , "PiBach_ProbNNmu/D"                     );
  tree->Branch("PiBach_ProbNNghost"                    , &PiBach_ProbNNghost                      , "PiBach_ProbNNghost/D"                  );
  tree->Branch("PiBach_isMuon"                         , &PiBach_isMuon                           , "PiBach_isMuon/O"                       );
  tree->Branch("PiBach_DOCAZ"                          , &PiBach_DOCAZ                            , "PiBach_DOCAZ/D"                        );
  // masses
  tree->Branch("mDz"                                   , &mDz                                     , "mDz/D"                                 );
  tree->Branch("mDst"                                  , &mDst                                    , "mDst/D"                                );
  tree->Branch("dm"                                    , &dm                                      , "dm/D"                                  );
  //vertex distances for removing secondary
  tree->Branch("Dst_Vtx_dist_z"                        , &Dst_Vtx_dist_z                          , "Dst_Vtx_dist_z/D"                      );
  tree->Branch("Dst_Vtx_dist_signed"                   , &Dst_Vtx_dist_signed                     , "Dst_Vtx_dist_signed/D"                 );
}
